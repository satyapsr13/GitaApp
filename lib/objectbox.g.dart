// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Data/model/ObjectModels/audio_file.dart';
import 'Data/model/ObjectModels/video_file.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4471901056465688408),
      name: 'AudioFile',
      lastPropertyId: const obx_int.IdUid(21, 7321022721130727018),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5477818292344183080),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5867312550094444436),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 5956324525234558921)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2062275466082381890),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 693067954533559222),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5545507056469428266),
            name: 'size',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6182255193760382188),
            name: 'format',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2300244011379251691),
            name: 'artist',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(2, 3449298043383429454)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7420960918491421738),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 873039571901003159),
            name: 'genre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5925975552409633506),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1543302567038927896),
            name: 'coverArtUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1407199424025515859),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 6202371728171504750),
            name: 'searchTags',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7321022721130727018),
            name: 'networkUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1948515769510826687),
      name: 'VideoFile',
      lastPropertyId: const obx_int.IdUid(9, 7302121679346733337),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6243608334697138915),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4450860890541186071),
            name: 'title',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(3, 8732225482949536735)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8180993687187253439),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1860968271908533306),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5592256943627997617),
            name: 'size',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2595758471417515870),
            name: 'format',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9018254761138641229),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3112876068514563766),
            name: 'networkUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7302121679346733337),
            name: 'searchTags',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1948515769510826687),
      lastIndexId: const obx_int.IdUid(3, 8732225482949536735),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7726640404008113855,
        5285375156534724269,
        1231197843708665917,
        3450150732042490199,
        6986194406532435412,
        4777580264213000850,
        8876320098961581921
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AudioFile: obx_int.EntityDefinition<AudioFile>(
        model: _entities[0],
        toOneRelations: (AudioFile object) => [],
        toManyRelations: (AudioFile object) => {},
        getId: (AudioFile object) => object.id,
        setId: (AudioFile object, int id) {
          object.id = id;
        },
        objectToFB: (AudioFile object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pathOffset = fbb.writeString(object.path);
          final formatOffset = fbb.writeString(object.format);
          final artistOffset = fbb.writeString(object.artist);
          final albumOffset = fbb.writeString(object.album);
          final genreOffset = fbb.writeString(object.genre);
          final coverArtUrlOffset = fbb.writeString(object.coverArtUrl);
          final descriptionOffset = fbb.writeString(object.description);
          final searchTagsOffset = fbb.writeList(
              object.searchTags.map(fbb.writeString).toList(growable: false));
          final networkUrlOffset = fbb.writeString(object.networkUrl);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.duration);
          fbb.addInt64(4, object.size);
          fbb.addOffset(5, formatOffset);
          fbb.addOffset(8, artistOffset);
          fbb.addOffset(9, albumOffset);
          fbb.addOffset(10, genreOffset);
          fbb.addBool(11, object.isFavorite);
          fbb.addOffset(15, coverArtUrlOffset);
          fbb.addOffset(16, descriptionOffset);
          fbb.addOffset(18, searchTagsOffset);
          fbb.addOffset(20, networkUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final networkUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final sizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final formatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final albumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final genreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final coverArtUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, '');
          final searchTagsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 40, []);
          final object = AudioFile(
              id: idParam,
              name: nameParam,
              path: pathParam,
              networkUrl: networkUrlParam,
              duration: durationParam,
              size: sizeParam,
              format: formatParam,
              artist: artistParam,
              album: albumParam,
              genre: genreParam,
              isFavorite: isFavoriteParam,
              coverArtUrl: coverArtUrlParam,
              description: descriptionParam,
              searchTags: searchTagsParam);

          return object;
        }),
    VideoFile: obx_int.EntityDefinition<VideoFile>(
        model: _entities[1],
        toOneRelations: (VideoFile object) => [],
        toManyRelations: (VideoFile object) => {},
        getId: (VideoFile object) => object.id,
        setId: (VideoFile object, int id) {
          object.id = id;
        },
        objectToFB: (VideoFile object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final pathOffset = fbb.writeString(object.path);
          final formatOffset = fbb.writeString(object.format);
          final networkUrlOffset = fbb.writeString(object.networkUrl);
          final searchTagsOffset = fbb.writeList(
              object.searchTags.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.duration);
          fbb.addInt64(4, object.size);
          fbb.addOffset(5, formatOffset);
          fbb.addBool(6, object.isFavorite);
          fbb.addOffset(7, networkUrlOffset);
          fbb.addOffset(8, searchTagsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final sizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final formatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final searchTagsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final networkUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = VideoFile(
              id: idParam,
              title: titleParam,
              path: pathParam,
              duration: durationParam,
              size: sizeParam,
              format: formatParam,
              isFavorite: isFavoriteParam,
              searchTags: searchTagsParam,
              networkUrl: networkUrlParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AudioFile] entity fields to define ObjectBox queries.
class AudioFile_ {
  /// See [AudioFile.id].
  static final id =
      obx.QueryIntegerProperty<AudioFile>(_entities[0].properties[0]);

  /// See [AudioFile.name].
  static final name =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[1]);

  /// See [AudioFile.path].
  static final path =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[2]);

  /// See [AudioFile.duration].
  static final duration =
      obx.QueryIntegerProperty<AudioFile>(_entities[0].properties[3]);

  /// See [AudioFile.size].
  static final size =
      obx.QueryIntegerProperty<AudioFile>(_entities[0].properties[4]);

  /// See [AudioFile.format].
  static final format =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[5]);

  /// See [AudioFile.artist].
  static final artist =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[6]);

  /// See [AudioFile.album].
  static final album =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[7]);

  /// See [AudioFile.genre].
  static final genre =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[8]);

  /// See [AudioFile.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<AudioFile>(_entities[0].properties[9]);

  /// See [AudioFile.coverArtUrl].
  static final coverArtUrl =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[10]);

  /// See [AudioFile.description].
  static final description =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[11]);

  /// See [AudioFile.searchTags].
  static final searchTags =
      obx.QueryStringVectorProperty<AudioFile>(_entities[0].properties[12]);

  /// See [AudioFile.networkUrl].
  static final networkUrl =
      obx.QueryStringProperty<AudioFile>(_entities[0].properties[13]);
}

/// [VideoFile] entity fields to define ObjectBox queries.
class VideoFile_ {
  /// See [VideoFile.id].
  static final id =
      obx.QueryIntegerProperty<VideoFile>(_entities[1].properties[0]);

  /// See [VideoFile.title].
  static final title =
      obx.QueryStringProperty<VideoFile>(_entities[1].properties[1]);

  /// See [VideoFile.path].
  static final path =
      obx.QueryStringProperty<VideoFile>(_entities[1].properties[2]);

  /// See [VideoFile.duration].
  static final duration =
      obx.QueryIntegerProperty<VideoFile>(_entities[1].properties[3]);

  /// See [VideoFile.size].
  static final size =
      obx.QueryIntegerProperty<VideoFile>(_entities[1].properties[4]);

  /// See [VideoFile.format].
  static final format =
      obx.QueryStringProperty<VideoFile>(_entities[1].properties[5]);

  /// See [VideoFile.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<VideoFile>(_entities[1].properties[6]);

  /// See [VideoFile.networkUrl].
  static final networkUrl =
      obx.QueryStringProperty<VideoFile>(_entities[1].properties[7]);

  /// See [VideoFile.searchTags].
  static final searchTags =
      obx.QueryStringVectorProperty<VideoFile>(_entities[1].properties[8]);
}
